{"ast":null,"code":"import api from './api';\nconst authService = {\n  login: async (email, password) => {\n    const response = await api.post('/auth/login', {\n      email,\n      password\n    });\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n      localStorage.setItem('user', JSON.stringify(response.data.user));\n    }\n    return response.data;\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n  getCurrentUser: () => {\n    return JSON.parse(localStorage.getItem('user'));\n  },\n  getMe: async () => {\n    const response = await api.get('/auth/me');\n    return response.data;\n  },\n  createInitialAdmin: async (name, email, password) => {\n    const response = await api.post('/auth/create-admin', {\n      name,\n      email,\n      password\n    });\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n      localStorage.setItem('user', JSON.stringify(response.data.user));\n    }\n    return response.data;\n  }\n};\nexport default authService;","map":{"version":3,"names":["api","authService","login","email","password","response","post","data","token","localStorage","setItem","JSON","stringify","user","logout","removeItem","getCurrentUser","parse","getItem","getMe","get","createInitialAdmin","name"],"sources":["E:/Github_Repo/task-management-frontend/frontend/src/services/authService.js"],"sourcesContent":["import api from './api';\r\n\r\nconst authService = {\r\n  login: async (email, password) => {\r\n    const response = await api.post('/auth/login', { email, password });\r\n    if (response.data.token) {\r\n      localStorage.setItem('token', response.data.token);\r\n      localStorage.setItem('user', JSON.stringify(response.data.user));\r\n    }\r\n    return response.data;\r\n  },\r\n\r\n  logout: () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n  },\r\n\r\n  getCurrentUser: () => {\r\n    return JSON.parse(localStorage.getItem('user'));\r\n  },\r\n\r\n  getMe: async () => {\r\n    const response = await api.get('/auth/me');\r\n    return response.data;\r\n  },\r\n\r\n  createInitialAdmin: async (name, email, password) => {\r\n    const response = await api.post('/auth/create-admin', { name, email, password });\r\n    if (response.data.token) {\r\n      localStorage.setItem('token', response.data.token);\r\n      localStorage.setItem('user', JSON.stringify(response.data.user));\r\n    }\r\n    return response.data;\r\n  }\r\n};\r\n\r\nexport default authService;\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,MAAMC,WAAW,GAAG;EAClBC,KAAK,EAAE,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IAChC,MAAMC,QAAQ,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,aAAa,EAAE;MAAEH,KAAK;MAAEC;IAAS,CAAC,CAAC;IACnE,IAAIC,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAE;MACvBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC;MAClDC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ,CAACE,IAAI,CAACM,IAAI,CAAC,CAAC;IAClE;IACA,OAAOR,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDO,MAAM,EAAEA,CAAA,KAAM;IACZL,YAAY,CAACM,UAAU,CAAC,OAAO,CAAC;IAChCN,YAAY,CAACM,UAAU,CAAC,MAAM,CAAC;EACjC,CAAC;EAEDC,cAAc,EAAEA,CAAA,KAAM;IACpB,OAAOL,IAAI,CAACM,KAAK,CAACR,YAAY,CAACS,OAAO,CAAC,MAAM,CAAC,CAAC;EACjD,CAAC;EAEDC,KAAK,EAAE,MAAAA,CAAA,KAAY;IACjB,MAAMd,QAAQ,GAAG,MAAML,GAAG,CAACoB,GAAG,CAAC,UAAU,CAAC;IAC1C,OAAOf,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDc,kBAAkB,EAAE,MAAAA,CAAOC,IAAI,EAAEnB,KAAK,EAAEC,QAAQ,KAAK;IACnD,MAAMC,QAAQ,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,oBAAoB,EAAE;MAAEgB,IAAI;MAAEnB,KAAK;MAAEC;IAAS,CAAC,CAAC;IAChF,IAAIC,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAE;MACvBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC;MAClDC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ,CAACE,IAAI,CAACM,IAAI,CAAC,CAAC;IAClE;IACA,OAAOR,QAAQ,CAACE,IAAI;EACtB;AACF,CAAC;AAED,eAAeN,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}